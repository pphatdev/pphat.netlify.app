import { writeFileSync, readFileSync } from 'fs';
import { join } from 'path';
import { currentDomain } from '../lib/constants';

interface SitemapRoute {
    path: string;
    changefreq: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';
    priority: number;
    lastmod?: string;
}

interface PostData {
    id: string;
    slug: string;
    published: boolean;
    createdAt: string;
}

// Define static routes for the site
const STATIC_ROUTES: SitemapRoute[] = [
    { path: '/', changefreq: 'weekly', priority: 1.0 },
    { path: '/about', changefreq: 'monthly', priority: 0.8 },
    { path: '/contact', changefreq: 'monthly', priority: 0.8 },
    { path: '/gallery', changefreq: 'monthly', priority: 0.8 },
    { path: '/posts', changefreq: 'weekly', priority: 0.9 },
    { path: '/projects', changefreq: 'monthly', priority: 0.8 },
    { path: '/login', changefreq: 'monthly', priority: 0.5 },
];

// Get dynamic post detail routes from post data
function fetchPostRoutes(): SitemapRoute[] {
    try {
        // Read posts from JSON file
        const postsFilePath = join(process.cwd(), 'public/data/post.json');

        const postsData = JSON.parse(readFileSync(postsFilePath, 'utf-8'));
        const posts = postsData.posts as PostData[];

        // Filter published posts and create route objects
        const publishedPosts = posts.filter(post => post.published);
        console.log(`${publishedPosts.length} posts are published and will be included in sitemap`);

        return publishedPosts.map(post => ({
            path: `/posts/${post.slug}`,
            changefreq: 'monthly' as const,
            priority: 0.7,
            lastmod: new Date(post.createdAt).toISOString().split('T')[0]
        }));
    } catch (error) {
        console.error('Error reading post data:', error);
        return [];
    }
}

// Generate and save the sitemap
export function createSitemap(): void {
    try {
        const today = new Date().toISOString().split('T')[0];
        const postRoutes = fetchPostRoutes();
        const allRoutes = [...STATIC_ROUTES, ...postRoutes];

        console.log('\nüìÅ Site Routes:');

        allRoutes.forEach((route, index) => {
            const isLast = index === allRoutes.length - 1;
            console.log(`${isLast ? ' ‚îî‚îÄ‚îÄ' : ' ‚îú‚îÄ‚îÄ'} ${route.path}`);
        });

        console.log('\n');

        const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
                <!-- Generated by PPhat's sitemap generator -->
                ${allRoutes.map(route => `
                    <url>
                        <loc>${encodeURI(`${currentDomain}${route.path}`)}</loc>
                        <lastmod>${route.lastmod || today}</lastmod>
                        <changefreq>${route.changefreq}</changefreq>
                        <priority>${route.priority.toFixed(1)}</priority>
                    </url>
                `).join('')}
            </urlset>`;

        const outputPath = join(process.cwd(), 'public/sitemap.xml');
        writeFileSync(outputPath, sitemap, 'utf-8');
        console.log(`‚úÖ Sitemap generated successfully at ${outputPath}`);
    } catch (error) {
        console.error('‚ùå Error generating sitemap:', error);
        process.exit(1);
    }
}

// Run the generator
createSitemap();
